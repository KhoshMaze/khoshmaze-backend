// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AllFoodsClient is the client API for AllFoods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllFoodsClient interface {
	GetAllFoods(ctx context.Context, in *GetAllFoodsRequest, opts ...grpc.CallOption) (*GetAllFoodsResponse, error)
}

type allFoodsClient struct {
	cc grpc.ClientConnInterface
}

func NewAllFoodsClient(cc grpc.ClientConnInterface) AllFoodsClient {
	return &allFoodsClient{cc}
}

func (c *allFoodsClient) GetAllFoods(ctx context.Context, in *GetAllFoodsRequest, opts ...grpc.CallOption) (*GetAllFoodsResponse, error) {
	out := new(GetAllFoodsResponse)
	err := c.cc.Invoke(ctx, "/pb.food.AllFoods/GetAllFoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllFoodsServer is the server API for AllFoods service.
// All implementations must embed UnimplementedAllFoodsServer
// for forward compatibility
type AllFoodsServer interface {
	GetAllFoods(context.Context, *GetAllFoodsRequest) (*GetAllFoodsResponse, error)
	mustEmbedUnimplementedAllFoodsServer()
}

// UnimplementedAllFoodsServer must be embedded to have forward compatible implementations.
type UnimplementedAllFoodsServer struct {
}

func (UnimplementedAllFoodsServer) GetAllFoods(context.Context, *GetAllFoodsRequest) (*GetAllFoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFoods not implemented")
}
func (UnimplementedAllFoodsServer) mustEmbedUnimplementedAllFoodsServer() {}

// UnsafeAllFoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllFoodsServer will
// result in compilation errors.
type UnsafeAllFoodsServer interface {
	mustEmbedUnimplementedAllFoodsServer()
}

func RegisterAllFoodsServer(s *grpc.Server, srv AllFoodsServer) {
	s.RegisterService(&_AllFoods_serviceDesc, srv)
}

func _AllFoods_GetAllFoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllFoodsServer).GetAllFoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.food.AllFoods/GetAllFoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllFoodsServer).GetAllFoods(ctx, req.(*GetAllFoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllFoods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.food.AllFoods",
	HandlerType: (*AllFoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllFoods",
			Handler:    _AllFoods_GetAllFoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "food.proto",
}
